<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xbehave</name>
    </assembly>
    <members>
        <member name="T:Xbehave.BackgroundAttribute">
            <summary>
            Applied to a method to indicate a background for each scenario defined in the same feature class.
            </summary>
        </member>
        <member name="M:Xbehave.BackgroundAttribute.CreateBackgroundCommands(Xunit.Sdk.IMethodInfo)">
            <summary>
            Creates the commands representing the backgrounds defined by the <paramref name="method"/>.
            </summary>
            <param name="method">The test method.</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the backgrounds defined by the <paramref name="method"/>.</returns>
        </member>
        <member name="M:Xbehave.BackgroundAttribute.EnumerateBackgroundCommands(Xunit.Sdk.IMethodInfo)">
            <summary>
            Enumerates the commands representing the backgrounds defined by the <paramref name="method"/>.
            </summary>
            <param name="method">The test method.</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the backgrounds defined by the <paramref name="method"/>.</returns>
        </member>
        <member name="T:Xbehave.ContinueOnFailureAfterAttribute">
            <summary>
            Allows step execution within a scenario to continue after a failed step.
            <example>
            To allow step execution to continue after any failed step:
            <code>[ContinueOnFailureAfter(StepType.Any)]</code>.
            </example>
            <example>
            To allow step execution to continue after a failed step but only after the execution of the first "Then" step, use
            <code>[ContinueOnFailureAfter(StepType.Then)]</code>.
            </example>
            The default setting is <c>StepType.None</c>.
            This attribute can be applied at the level of method (scenario), class (feature) or assembly (product).
            </summary>
        </member>
        <member name="M:Xbehave.ContinueOnFailureAfterAttribute.#ctor(Xbehave.StepType)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbehave.ContinueOnFailureAfterAttribute"/> class.
            </summary>
            <param name="stepType">Type of the step.</param>
        </member>
        <member name="P:Xbehave.ContinueOnFailureAfterAttribute.StepType">
            <summary>
            Gets the type of the step.
            </summary>
            <value>
            The type of the step.
            </value>
        </member>
        <member name="T:Xbehave.IStepContext">
            <summary>
            A scenario step context.
            </summary>
        </member>
        <member name="M:Xbehave.IStepContext.Using(System.IDisposable)">
            <summary>
            Immediately registers the <see cref="T:System.IDisposable"/> object for disposal after all steps in the current scenario have been executed.
            </summary>
            <param name="disposable">The object to be disposed.</param>
            <returns>The current <see cref="T:Xbehave.IStepContext"/>.</returns>
        </member>
        <member name="T:Xbehave.OmitArgumentsFromScenarioNamesAttribute">
            <summary>
            Omits arguments passed to scenario methods (e.g. using <see cref="T:Xbehave.ExampleAttribute"/>) from scenario names in test output.
            Disabled by default.
            This attribute can be applied at the level of method (scenario), class (feature) or assembly (product).
            </summary>
        </member>
        <member name="M:Xbehave.OmitArgumentsFromScenarioNamesAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xbehave.OmitArgumentsFromScenarioNamesAttribute"/> class.
            </summary>
            <param name="enabled">If set to <c>true</c> [enabled].</param>
        </member>
        <member name="P:Xbehave.OmitArgumentsFromScenarioNamesAttribute.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:Xbehave.OmitArgumentsFromScenarioNamesAttribute"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Xbehave.StepType">
            <summary>
            Represents the type of a step.
            </summary>
        </member>
        <member name="F:Xbehave.StepType.Any">
            <summary>
            Represents any step type.
            </summary>
        </member>
        <member name="F:Xbehave.StepType.None">
            <summary>
            Represents no step type.
            </summary>
        </member>
        <member name="F:Xbehave.StepType.Given">
            <summary>
            Represents a "Given" step.
            </summary>
        </member>
        <member name="F:Xbehave.StepType.When">
            <summary>
            Represents a "When" step.
            </summary>
        </member>
        <member name="F:Xbehave.StepType.Then">
            <summary>
            Represents a "Then" step.
            </summary>
        </member>
        <member name="F:Xbehave.StepType.And">
            <summary>
            Represents a "And" step.
            </summary>
        </member>
        <member name="F:Xbehave.StepType.But">
            <summary>
            Represents a "But" step.
            </summary>
        </member>
        <member name="T:Xbehave.Guard">
            <summary>
            Provides guard clauses.
            </summary>
        </member>
        <member name="M:Xbehave.Guard.AgainstNullArgument``1(System.String,``0)">
            <summary>
            Guards against a null argument.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument"/> is <c>null</c>.</exception>
            <remarks><typeparamref name="TArgument"/> is restricted to reference types to avoid boxing of value type objects.</remarks>
        </member>
        <member name="M:Xbehave.Guard.AgainstNullArgumentIfNullable``1(System.String,``0)">
            <summary>
            Guards against a null argument if <typeparamref name="TArgument"/> can be <c>null</c>.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument"/> is <c>null</c>.</exception>
            <remarks>
            Performs a type check to avoid boxing of value type objects.
            </remarks>
        </member>
        <member name="M:Xbehave.Guard.AgainstNullArgumentProperty``1(System.String,System.String,``0)">
            <summary>
            Guards against a null argument property value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="argumentProperty">The argument property.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argumentProperty"/> is <c>null</c>.</exception>
            <remarks><typeparamref name="TProperty"/> is restricted to reference types to avoid boxing of value type objects.</remarks>
        </member>
        <member name="M:Xbehave.Guard.AgainstNullArgumentPropertyIfNullable``1(System.String,System.String,``0)">
            <summary>
            Guards against a null argument property value if <typeparamref name="TProperty"/> can be <c>null</c>.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="argumentProperty">The argument property.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argumentProperty"/> is <c>null</c>.</exception>
            <remarks>
            Performs a type check to avoid boxing of value type objects.
            </remarks>
        </member>
        <member name="M:Xbehave.Guard.IsNullableType(System.Type)">
            <summary>
            Determines whether the specified type is a nullable type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is a nullable type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Xbehave.Guard.ValidatedNotNullAttribute">
            <summary>
            When applied to a parameter, this attribute provides an indication to code analysis that the argument has been null checked.
            </summary>
        </member>
        <member name="T:Xbehave.DisposableExtensions">
            <summary>
            <see cref="T:System.IDisposable"/> extensions.
            </summary>
        </member>
        <member name="M:Xbehave.DisposableExtensions.Using``1(``0)">
            <summary>
            Immediately registers the <see cref="T:System.IDisposable"/> object for disposal after all steps in the current scenario have been executed.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be disposed.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Xbehave.DisposableExtensions.Using``1(``0,Xbehave.IStepContext)">
            <summary>
            Immediately registers the <see cref="T:System.IDisposable"/> object for disposal after all steps in the current scenario have been executed.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be disposed.</param>
            <param name="stepContext">The execution context for the current step.</param>
            <returns>The object.</returns>
        </member>
        <member name="T:Xbehave.ExampleAttribute">
            <summary>
            Provides example values for a scenario passed as arguments to the scenario method.
            This attribute is designed as a synonym of <see cref="T:Xunit.Extensions.InlineDataAttribute"/>,
            which is the most commonly used data attribute, but you can also use any type of attribute derived from
            <see cref="T:Xunit.Extensions.DataAttribute"/> to provide a data source for a scenario.
            E.g. <see cref="T:Xunit.Extensions.ClassDataAttribute"/>,
            <see cref="T:Xunit.Extensions.OleDbDataAttribute"/>,
            <see cref="T:Xunit.Extensions.SqlServerDataAttribute"/>,
            <see cref="T:Xunit.Extensions.ExcelDataAttribute"/> or
            <see cref="T:Xunit.Extensions.PropertyDataAttribute"/>.
            </summary>
        </member>
        <member name="M:Xbehave.ExampleAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xbehave.ExampleAttribute"/> class.
            This attribute is designed as a synonym of <see cref="T:Xunit.Extensions.InlineDataAttribute"/>,
            which is the most commonly used data attribute, but you can also use any type of attribute derived from
            <see cref="T:Xunit.Extensions.DataAttribute"/> to provide a data source for a scenario.
            E.g. <see cref="T:Xunit.Extensions.ClassDataAttribute"/>,
            <see cref="T:Xunit.Extensions.OleDbDataAttribute"/>,
            <see cref="T:Xunit.Extensions.SqlServerDataAttribute"/>,
            <see cref="T:Xunit.Extensions.ExcelDataAttribute"/> or
            <see cref="T:Xunit.Extensions.PropertyDataAttribute"/>.
            </summary>
            <param name="dataValues">The data values to pass to the scenario.</param>
        </member>
        <member name="T:Xbehave.Fluent.IStep">
            <summary>
            A scenario step.
            </summary>
        </member>
        <member name="M:Xbehave.Fluent.IStep.And">
            <summary>
            An optional fluent conjunction.
            </summary>
            <returns>An instance of <see cref="T:Xbehave.Fluent.IStep"/>.</returns>
        </member>
        <member name="M:Xbehave.Fluent.IStep.WithTimeout(System.Int32)">
            <summary>
            Indicate that execution of the defined step should be cancelled after a specified timeout.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <returns>An instance of <see cref="T:Xbehave.Fluent.IStep"/>.</returns>
        </member>
        <member name="M:Xbehave.Fluent.IStep.InIsolation">
            <summary>
            Indicates that an isolated context will be created containing this step and a copy of all preceding steps.
            </summary>
            <returns>An instance of <see cref="T:Xbehave.Fluent.IStep"/>.</returns>
        </member>
        <member name="M:Xbehave.Fluent.IStep.Skip(System.String)">
            <summary>
            Indicates that the step will not be executed.
            </summary>
            <param name="reason">The reason for not executing the step.</param>
            <returns>An instance of <see cref="T:Xbehave.Fluent.IStep"/>.</returns>
        </member>
        <member name="M:Xbehave.Fluent.IStep.Teardown(System.Action)">
            <summary>
            Declares a teardown action (related to this step and/or previous steps) which will be executed after all steps in the current scenario have been executed.
            </summary>
            <param name="action">The action.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="T:Xbehave.ScenarioAttribute">
            <summary>
            Applied to a method to indicate the definition of a scenario.
            A scenario can also be fed examples from a data source, mapping to parameters on the scenario method.
            If the data source contains multiple rows, then the scenario method is executed multiple times (once with each data row).
            Examples can be fed to the scenario by applying one or more instances of <see cref="T:Xbehave.ExampleAttribute"/>
            or any other attribute inheriting from <see cref="T:Xunit.Extensions.DataAttribute"/>.
            E.g. <see cref="T:Xunit.Extensions.ClassDataAttribute"/>,
            <see cref="T:Xunit.Extensions.OleDbDataAttribute"/>,
            <see cref="T:Xunit.Extensions.SqlServerDataAttribute"/>,
            <see cref="T:Xunit.Extensions.ExcelDataAttribute"/> or
            <see cref="T:Xunit.Extensions.PropertyDataAttribute"/>.
            </summary>    
        </member>
        <member name="M:Xbehave.ScenarioAttribute.EnumerateTestCommands(Xunit.Sdk.IMethodInfo)">
            <summary>
            Enumerates the test commands representing the background and scenario steps for each isolated context.
            </summary>
            <param name="method">The scenario method.</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the background and scenario steps for each isolated context.</returns>
        </member>
        <member name="M:Xbehave.ScenarioAttribute.EnumerateBackgroundCommands(Xunit.Sdk.IMethodInfo)">
            <summary>
            Enumerates the commands representing the backgrounds associated with the <paramref name="method"/>.
            </summary>
            <param name="method">The scenario method.</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the backgrounds associated with the <paramref name="method"/>.</returns>
        </member>
        <member name="M:Xbehave.ScenarioAttribute.EnumerateScenarioCommands(Xunit.Sdk.IMethodInfo)">
            <summary>
            Enumerates the commands representing the scenarios defined by the <paramref name="method"/>.
            </summary>
            <param name="method">The scenario method.</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the scenarios defined by the <paramref name="method"/>.</returns>
            <remarks>This method may be overridden.</remarks>
        </member>
        <member name="P:Xbehave.ScenarioAttribute.Timeout">
            <summary>
            Gets or sets a timeout which, if exceeded, indicates that the scenario has failed.
            </summary>
            <remarks>This property is deprecated in favor of timeouts on specific steps.</remarks>
        </member>
        <member name="T:Xbehave.StepExtensions">
            <summary>
            <see cref="T:Xbehave.Fluent.IStep"/> extensions.
            </summary>
        </member>
        <member name="M:Xbehave.StepExtensions.When(Xbehave.Fluent.IStep,System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="stepDefinition">The step definition.</param>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StepExtensions.Then(Xbehave.Fluent.IStep,System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="stepDefinition">The step definition.</param>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StepExtensions.And(Xbehave.Fluent.IStep,System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="stepDefinition">The step definition.</param>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StepExtensions.But(Xbehave.Fluent.IStep,System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="stepDefinition">The step definition.</param>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StepExtensions.When(Xbehave.Fluent.IStep,System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="stepDefinition">The step definition.</param>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StepExtensions.Then(Xbehave.Fluent.IStep,System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="stepDefinition">The step definition.</param>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StepExtensions.And(Xbehave.Fluent.IStep,System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="stepDefinition">The step definition.</param>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StepExtensions.But(Xbehave.Fluent.IStep,System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="stepDefinition">The step definition.</param>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="T:Xbehave.StringExtensions">
            <summary>
            Provides access to step definition methods.
            </summary>
        </member>
        <member name="M:Xbehave.StringExtensions.Given(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.When(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.Then(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.And(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.But(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.f(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions._(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.Given(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.When(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.Then(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.And(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.But(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.f(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions._(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave.StringExtensions.GetStepType(System.String)">
            <summary>
            Get the appropriate step type based on the the text.
            </summary>
            <param name="text">The step text.</param>
            <returns>The appropriate step type based on the text.</returns>
        </member>
        <member name="T:Xbehave._">
            <summary>
            Provides access to step definition methods.
            </summary>
        </member>
        <member name="M:Xbehave._.Given(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.When(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.Then(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.And(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.But(System.String,System.Action)">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.Given(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.When(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.Then(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.And(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
        <member name="M:Xbehave._.But(System.String,System.Action{Xbehave.IStepContext})">
            <summary>
            Defines a step in the current scenario.
            </summary>
            <param name="text">The step text.</param>
            <param name="body">The action that will perform the step.</param>
            <returns>
            An instance of <see cref="T:Xbehave.Fluent.IStep"/>.
            </returns>
        </member>
    </members>
</doc>
